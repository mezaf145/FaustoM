**//Partner Lab 6 Tic Tac Toe CS1
//Fausto Meza and Mary Valencia
* Instructions: *Using the design recipie*,
* implement the missing code by following the TODO tags.
** /

/**
 * Tic-Tac-Toe
 *
 * Allows a user to play a game of tic tac toe in the terminal against a
 * computer.
 *
 **/

#include <string>
#include <vector>
#include <cassert>
#include <iostream>

	using namespace std;
/**
 * Data definitions
 **/

 // A Location represents the index of a space on a tic-tac-toe board in the
 // following configuration:
 // 0|1|2
 // -+-+-
 // 3|4|5
 // -+-+-
 // 6|7|8
using Location = int;

// A Space represents the possible values within one space on the tic-tac-toe
// board.
enum class Space { Empty, X, O };


// A Row represents one row of 3 spaces on the tic-tac-toe board
struct Row {
	Space left, center, right;
};
const Row BLANK_ROW = { Space::Empty, Space::Empty, Space::Empty };
// A Board consists of 3 rows of spaces
struct Board {
	Row top, middle, bottom;
};
const Board BLANK_BOARD = { BLANK_ROW, BLANK_ROW, BLANK_ROW };
/**
 * Functions
 **/

 //// Initializers
Space c_to_space(char c);
Row s_to_row(std::string s);
Board s_to_board(std::string s);

//// Printers
void test_space_to_s();
string space_to_s(Space s);
void test_row_to_s();
string row_to_s(Row r);
void test_board_to_s();
string board_to_s(Board b);

//// Interface
void test_gamestate_message();
string gamestate_message(Board b, Space turn);
void test_end_game_message();
string end_game_message(Board b, Space win);

//// Get moves
Location get_move(Board b, Space turn);
Location compute_move(Board b, Space turn);

//// Getters
Space get_space(Board b, Location l);
Space get_space(Row b, Location l);

//// Setters
Board set_space(Board b, Location l, Space s);
Row set_space(Row r, Location l, Space s);


//// Game mechanics
bool full(Board b);
bool full(Row r);
bool full(Space s);

vector<Row> flay(Board b);
vector<Row> flay_rows(Board b);
vector<Row> flay_cols(Board b);
vector<Row> flay_diags(Board b);

Space winner(Board b);
Space winner(Row r);

bool is_game_over(Board b);
Space next_turn(Space t);
//// Template Functions
void test();
void run();
void run_game();

/**
 * Main Function
 **/

int main() {
	char t;

	cout << "Enter [t] to test, or any other character to run." << endl;
	cin >> t;
	if (t == 't') {
		test();
	}
	else {
		run();
	}
	return 0;
}
void run() {
	// Variable Declarations
	char again = 'y';
	while (again == 'y') {
		run_game();
		cout << "Play again? [y/n] " << endl;
		cin >> again;
	}
}
void test() {//200% sure this is not the right way to assert
	// TODO Implement these!
	test_space_to_s();
	//Should return Space possibilities when using 's'
	//and is a string
	assert(static_cast<string>(space_to_s(s 
		== Space{ Empty, X, O }));
	test_row_to_s();
	//Should return Row possibilities including spaces
	//when using 'r' and is a string
	assert(static_cast<string>(row_to_s(r 
		== Row{ Space left, center, right })));
		test_board_to_s();
	//Should return Board possibilities including rows
	//when using 'b' and is a string
		assert(static_cast<string>(board_to_s(b 
			== Board{ Row top, middle, bottom })));
		test_gamestate_message();
	//Should return gamestate message when looking and using 'b' as board
	//and 'turn' as Space and should become a string
	assert(static_cast<string>(gamestate_message(b == Board && turn == Space)))
		test_end_game_message();
	//Should return end game message when looking and using 'b' as Board
	//and 'win' as Space and should become a string
	assert(static_cast<string>(end_game_message(b == Board && win == Space))
}
void run_game() {
	// Initial game state with blank board and player one first.
	Board b = BLANK_BOARD;
	Space turn = Space::O;
	Location move;

	while (!is_game_over(b)) {
		// Human player
		if (turn == Space::O) {
			// Show player the board
			cout << gamestate_message(b, turn) << endl;
			move = get_move(b, turn);
			// Computer
		}
		else {
			move = compute_move(b, turn);
		}
		b = set_space(b, move, turn);
		turn = next_turn(turn);
	}
	cout << end_game_message(b, winner(b)) << endl;
	return;
}




//// Printers
/*TODO*/
//This contains space possibilities and returns them depending on 
//what is in them
//Input
//Space - posibilites containing 'x' 'o' and '(empty)'
//s - representing what to return
//Empty - representing the empty space
//X - representing a taken space by a player's turn
//Output
//" " - represents an empty space
//"x" - represents a player's turn
//"o" - represents the other player's turn
string space_to_s(Space s) {
	if (s == Space::Empty) {
		return " ";//Return an empty space if s is equal to empty
	}
	else if (s == Space::X) {
		return "x";//Return an X if s is equal to Player X's turn
	}
	else {
		return "o";//Return an O if s doesn't equal to Player X's turn
	}
}
/*TODO*/
//This contains the row options and returns them
//Input
//Row - the row options containing left center and right
//r - representing the dot operator to Row options
//Output
//r.left - represents the left row of the board
//r.center - represents the center row of the board
//r.right - represents the right row of the board
string row_to_s(Row r) {
	return space_to_s(r.left) +//returns the left row of the board
		space_to_s(r.center) +//returns the center row of the board
		space_to_s(r.right);//returns the right row of the board
}
/*TODO*/
//This contains all of the board options and returns them
//Input 
//Board - Representing the board options containing the rows of it
//b - representing the dot operator to horizontal row options
//Output
//b.top - the top horizontal row of the board
//b.middle - the middle horizontal row of the board
//b.bottom - the bottom horizontal row of the board
string board_to_s(Board b) {
	return row_to_s(b.top) +//returns the top horizontal row of the board
		row_to_s(b.middle) +//returns the middle horizontal row of the board
		row_to_s(b.bottom);//returns the bottom horizontal row of the board
}

/*TODO*/
//This Returns the end game message 
//Input
//Board b - represents the board
//Space win - the deciding winner
//Output
//"Game Over" - end game message
//// Space win - who was the winner? `Empty` means it's a cat's game
string end_game_message(Board b, Space win) {
	return "Game Over";//Return Game Over after someone wins or draws on the board
}
/*TODO*/
//This returns the state of the game as a message 
//Input
//Board b - represents the board
//Space turn - the turn taken by the player
//Output 
//"This is what the board looks like: " - gamestate message
string gamestate_message(Board b, Space turn) {
	return "This is what the board looks like: ";
	//return the message after each turn
}

//// Get moves
/*TODO*/
//This gets the moves available onto the board 
//Input
//Board b - represents the board
//Space turn - the turn taken by the player
//Location - the specific location on the board
//Output 
//return 1 - representing the 'available' location
Location get_move(Board b, Space turn) {
	Location l = 0;//have the location be 1 to mark as available
	cin >> l;//cin a 1 to fill that location 
	return l;//return it as 1('available')
}
/*TODO*/
//This processes the move to the board
//Input
//Board b - represents the board
//Space turn - the turn taken by the player
//Output
//return 0 - marks the location as taken
Location compute_move(Board b, Space turn) {
	return 0;//return 0('taken') each turn played
}


/**
 *
 *
 *
 *
 *
 *
 *
 * Don't worry too much about this stuff down here
 *
 **/

 //// Initializers
Space c_to_space(char c) {
	if (c == ' ') {
		return Space::Empty;
	}
	else if (c == 'x') {
		return Space::X;
	}
	else {
		return Space::O;
	}
}
Row s_to_row(string s) {
	return { c_to_space(s[0]),
			 c_to_space(s[1]),
			 c_to_space(s[2]) };
}
Board s_to_board(string s) {
	return { s_to_row(s.substr(0,3)),
			 s_to_row(s.substr(3,3)),
			 s_to_row(s.substr(6,3)) };
}

//// Getters
Space get_space(Board b, Location l) {
	int row = l / 3;
	Space result;
	if (row == 0) {
		result = get_space(b.top, l);
	}
	else if (row == 1) {
		result = get_space(b.middle, l);
	}
	else {
		result = get_space(b.bottom, l);
	}
	return result;
}
Space get_space(Row r, Location l) {
	int col = l % 3;
	Space result;
	if (col == 0) {
		result = r.left;
	}
	else if (col == 1) {
		result = r.center;
	}
	else {
		result = r.right;
	}
	return result;
}

//// Setters
Board set_space(Board b, Location l, Space s) {
	int row = l / 3;
	if (row == 0) {
		b.top = set_space(b.top, l, s);
	}
	else if (row == 1) {
		b.middle = set_space(b.middle, l, s);
	}
	else {
		b.bottom = set_space(b.bottom, l, s);
	}
	return b;
}
Row set_space(Row r, Location l, Space s) {
	int col = l % 3;
	Row result = r;
	if (col == 0) {
		result.left = s;
	}
	else if (col == 1) {
		result.center = s;
	}
	else {
		result.right = s;
	}
	return result;
}


//// Game mechanics
bool full(Board b) {
	return full(b.top) && full(b.middle) && full(b.bottom);
}
bool full(Row r) {
	return full(r.left) && full(r.center) && full(r.right);
}
bool full(Space s) {
	return s != Space::Empty;
}

// Get every row, col, and diagonal as a vector
vector<Row> flay(Board b) {
	vector<Row> v(8);
	vector<Row> s = flay_rows(b);
	v.insert(v.end(), s.begin(), s.end());
	s = flay_cols(b);
	v.insert(v.end(), s.begin(), s.end());
	s = flay_diags(b);
	v.insert(v.end(), s.begin(), s.end());
	return v;
}
vector<Row> flay_rows(Board b) {
	return { b.top, b.middle, b.bottom };
}
vector<Row> flay_cols(Board b) {
	return { { b.top.left, b.middle.left, b.bottom.left },
			 { b.top.center, b.middle.center, b.bottom.center },
			 { b.top.right, b.middle.right, b.bottom.right } };
}
vector<Row> flay_diags(Board b) {
	return { { b.top.left, b.middle.center, b.bottom.right },
			 { b.top.right, b.middle.center, b.bottom.left } };
}
// Returns Empty for a cats or a game that hasn't endend. Use `full` to check
// for cats
Space winner(Board b) {
	vector<Row> f = flay(b);
	Space win;
	for (int i = 0; i < f.size(); i++) {
		win = winner(f[i]);
		if (win != Space::Empty) {
			return win;
		}
	}
	return Space::Empty;
}

Space winner(Row r) {
	if (r.left == r.center && r.center == r.right) {
		return r.left;
	}
	else {
		return Space::Empty;
	}
}

bool is_game_over(Board b) {
	return full(b) || winner(b) != Space::Empty;
}
Space next_turn(Space t) {
	return static_cast<Space>((static_cast<int>(t) % 2) + 1);
}
